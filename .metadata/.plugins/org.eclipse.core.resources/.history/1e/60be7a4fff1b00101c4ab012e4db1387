package com.finals;

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class Practice {
	
	
	
	 private static boolean isPrime(int n) 
     {
         if (n <= 1) {
             return false;
         }
         for (int i = 2; i <= Math.sqrt(n); i++) {
             if (n % i == 0) {
                 return false;
             }
         }
         return true;
     }

	public static void main(String[] args) 
	{
		
		List<Integer> list = Arrays.asList(10, 5, 7, 18, 3, 15);
		
		 List<String> strings = Arrays.asList("aple", "banana", "kiwi", "orange", "pear", "strawberry", "watermelon");
		 
		 List<String> fruits = Arrays.asList("apple", null, "banana", null, "kiwi", "orange", null, "pear");
		
		
		
		/*===========1) Write a program to find the sum of all elements in a list using Java Stream API=============*/
		
		  int sum =     list.stream().mapToInt(Integer::intValue).sum();
		  
		  //System.out.println(sum);

		/*===========2) Given a list of integers, write a program to find and print the maximum element using Java Stream API=============*/
		  
		OptionalInt max =    list.stream().mapToInt(Integer::intValue).max();
		
		//System.out.println(max);

		/*===========3) Write a program to filter out all the even numbers from a list using Java Stream API=============*/
		
		 List<Integer> res =     list.stream().filter(n -> n%2==0).collect(Collectors.toList());
		 
		 //System.out.println(res);

		/*===========4) Given a list of strings, write a program to count the number of strings containing a specific character ‘a’ using Java Stream API=============*/
		 
		   char target ='a';
		 
		long result =   strings.stream().filter(str -> str.contains(String.valueOf(target))).count();
		
		//System.out.println(result);

		/*===========5) Write a program to convert a list of strings to uppercase using Java Stream API=============*/
		
		 List<String> res1=     strings.stream().map(String::toUpperCase).collect(Collectors.toList());
		 
		 //System.out.println(res1);

		/*===========6) Given a list of integers, write a program to calculate the average of all the numbers using Java Stream API=============*/
		 
		  OptionalDouble average =         list.stream().mapToDouble(Integer::doubleValue).average();
		  
		  //System.out.println(average);

		/*===========7) Write a program to sort a list of strings in alphabetical order using Java Stream API=============*/
		  
		List<String> res2=  strings.stream().sorted().collect(Collectors.toList());
		
		//System.out.println(res2);

		/*===========8) Given a list of strings, write a program to concatenate all the strings using Java Stream API=============*/
		
		     
		   String joins =    strings.stream().collect(Collectors.joining());
		   
		   //System.out.println(joins);
		    
		

		/*===========9) Write a program to find the longest string in a list of strings using Java Stream API=============*/
		   
		Optional<String> longest =   strings.stream().max((str1,str2) -> str1.length()-str2.length());
		
		//System.out.println(longest);
		
		
		Optional<String> shortest =	strings.stream().max((str1,str2) -> str2.length()-str1.length());
		
		//System.out.println(shortest);
		   

		/*===========10) Given a list of integers, write a program to find and print the second largest number using Java Stream API=============*/
		
		Optional<Integer> secondLargest =    list.stream().sorted((num1,num2) -> num2-num1).skip(1).findFirst();
		
		//System.out.println(secondLargest);
		
		
		
		
		/*===========11) Write a program to remove all the duplicate elements from a list using Java Stream API=============*/
		
		
		     List<Integer> removeDuplicates =   list.stream().distinct().collect(Collectors.toList());
		     
		     //System.out.println(removeDuplicates);
		
		

		/*===========12) Given a list of strings, write a program to find and print the shortest string using Java Stream API=============*/
		     
		          Optional<String> res5 =       strings.stream().max((str1,str2) -> str2.length()-str1.length());
		          
		          //System.out.println(res5);

		/*===========13) Write a program to convert a list of integers to a list of their squares using Java Stream API=============*/
		          
		    List<Integer> squares =      list.stream().map(n -> n*n).collect(Collectors.toList());
		    
		    //System.out.println(squares);
		          

		/*===========14) Given a list of strings, write a program to find and print the strings starting with a specific prefix ‘a’ using Java Stream API=============*/
		    
		               char searchBar = 'a';
		    
		            List<String> result8 =     strings.stream().filter(str -> str.contains(String.valueOf(searchBar))).collect(Collectors.toList());
		            //System.out.println(result8);
		    
		                          

		/*===========15) Write a program to find the product of all elements in a list of integers using Java Stream API=============*/
		            
		            
		     Integer resu =        list.stream().reduce(1, (a,b) -> a*b);
		     
		     //System.out.println(resu);

		/*===========16) Given a list of integers, write a program to find and print the prime numbers using Java Stream API=============*/

             List<Integer> prime = list.stream().filter(Practice::isPrime).collect(Collectors.toList());
             
             //System.out.println(prime);
             
             
         /*===========17) Write a program to check if a list of strings contains a specific string using Java Stream API=============*/
             
             String targets = "bana";
             
         //Boolean avail =   strings.stream().anyMatch(str -> str.equals(targets));
             
           Boolean avail =    strings.stream().anyMatch(str -> str.equals(targets));
          
          //System.out.println(avail);
                

		/*===========18) Given a list of strings, write a program to find and print the strings with length greater than a specified value 5 using Java Stream API=============*/
          
         List<String>  ans =   strings.stream().filter(str -> str.length()>5).collect(Collectors.toList());
         
         //System.out.println(ans);

		/*===========19) Write a program to filter out all the elements divisible by 3 and 5 from a list of integers using Java Stream API=============*/
         
                List<Integer> answer =    list.stream().filter(n -> n%3==0 && n%5==0).collect(Collectors.toList());
                
                //System.out.println(answer);
                              

		/*===========20) Given a list of strings, write a program to find and print the strings with the maximum length using Java Stream API=============*/
                
              //Optional<String> maxLength =    strings.stream().max((str1,str2) -> str1.length()-str2.length());
              
              //System.out.println(maxLength);
                
                
                int maxLength = strings.stream().mapToInt(String::length).max().orElse(0);
                
                List<String> longestStrings =     strings.stream().filter(str -> str.length()==maxLength).collect(Collectors.toList());
                
                //System.out.println(longestStrings);
                
		
		/*===========21) Write a program to reverse a list of strings using Java Stream API=============*/
                 
                    
                 List<String> reverse =   IntStream.range(0, strings.size()).mapToObj(i -> strings.get(strings.size()-1-i)).collect(Collectors.toList());
                 
                //System.out.println(reverse);
                
                

		/*===========22) Given a list of integers, write a program to find and print the distinct odd numbers using Java Stream API=============*/
                
              List<Integer> resa =  list.stream().filter(n -> n%2!=0).distinct().collect(Collectors.toList());
              
              //System.out.println(resa);
                

		/*===========23) Write a program to remove all null values from a list of strings using Java Stream API=============*/
              
              
             List<String> nullValue =       fruits.stream().filter(n -> n!=null).collect(Collectors.toList());
             
             System.out.println(nullValue);

		/*===========24) Given a list of integers, write a program to find and print the sum of all odd numbers using Java Stream API=============*/
             
             
          Integer  sumOdd =  list.stream().filter(n -> n%2!=0).reduce(0, (a,b) -> a+b);
          
          System.out.println(sumOdd);

		/*===========25) Write a program to find the intersection of two lists of strings using Java Stream API=============*/
          
          
          List<String> list1 = Arrays.asList("apple", "banana", "kiwi", "orange", "pear");
          List<String> list2 = Arrays.asList("banana", "orange", "grape", "watermelon");
          
         List<String> list3 =     list1.stream().filter(list2::contains).collect(Collectors.toList());
         
         System.out.println(list3);

		/*===========26) Given a list of strings, write a program to find and print the strings containing only vowels using Java Stream API=============*/
         
            List<String> vowels =     strings.stream().filter(s -> s.matches("[aeiouAEIOU]+")).collect(Collectors.toList());
            
            System.out.println(vowels);

		/*===========27) Write a program to convert a list of strings to a comma-separated string using Java Stream API=============*/
            
        String asa =    strings.stream().collect(Collectors.joining(" , "));
        
        System.out.println(asa);
            

		/*===========28) Given a list of integers, write a program to find and print the index of the first occurrence of a specific number using Java Stream API=============*/
        
                     int value =7;
        
        
                  OptionalInt index =    IntStream.range(0, list.size())
                         .filter(n -> list.get(n)==value).findFirst();
                  
                  
                  System.out.println(index);
                      
        
        
        
        
        

		/*===========29) Write a program to find the union of two lists of integers using Java Stream API=============*/

                  List<Integer> lists1 = Arrays.asList(1, 2, 3, 4, 5);
                  List<Integer> lists2 = Arrays.asList(4, 5, 6, 7, 8);
                  
                  
               List<Integer> union =     Stream.concat(lists1.stream(), lists2.stream()).distinct().collect(Collectors.toList());
               
               System.out.println(union);
                    
                    
                  
                  
                  
		/*===========30) Given a list of strings, write a program to find and print the strings containing duplicate characters using Java Stream API=============*/
               
                    
                        List<String>  nsma = strings.stream().filter(s -> s.length()!=s.chars().distinct().count()).collect(Collectors.toList());
                        
                        System.out.println(nsma);
               
               
               
		
		/*===========31) Write a program to check if all elements in a list of strings are of the same length using Java Stream API=============*/
                        
                        
                        
                boolean sameLength =        strings.stream().map(String::length).distinct().count()==1;
                
                System.out.println(sameLength);

		/*===========32) Given a list of integers, write a program to find and print the difference between the maximum and minimum numbers using Java Stream API=============*/
                
                
                    OptionalInt maximum =      list.stream().mapToInt(Integer::intValue).max(); 
                    
                    
                    OptionalInt minimum =                      list.stream().mapToInt(Integer::intValue).min();
                    
                    System.out.println(minimum);
                    
                    int resa1 = maximum.getAsInt() - minimum.getAsInt();
                    
                    System.out.println(resa1);
                

		/*===========33) Write a program to remove all whitespace from a list of strings using Java Stream API=============*/
                    
                    
                   /* List<String> data = Arrays.asList("apple", "ba nana", "kiwi", "oran ge", "pear");
                    
                     List<String> answ =      data.stream().map(str -> str.replaceAll("\\s", "")).collect(Collectors.toList());
             
                    System.out.println(answ);*/
                    

		/*===========34) Given a list of strings, write a program to find and print the strings containing a specific substring using Java Stream API=============*/
                    
                    
                /*    List<String> data = Arrays.asList("apple", "banana", "kiwi", "orange", "pear");
                    String substring = "an";
                    
                List<String>  anser =   data.stream().filter(str -> str.contains(substring)).collect(Collectors.toList());
                
                System.out.println(anser);*/
                    
                    

		/*===========35) Write a program to find the mode of a list of integers using Java Stream API=============*/
                    
                    Map<Object, Long> frequency = list.stream()
                            .collect(Collectors.groupingBy(s -> s, Collectors.counting()));

                    long max = frequency.values().stream()
                            .mapToLong(Long::longValue)
                            .max()
                            .orElse(0);

                    List<Object> modes = frequency.entrySet().stream()
                            .filter(entry -> entry.getValue() == max)
                            .map(Map.Entry::getKey)
                            .collect(Collectors.toList());
                      
          
          
          
                    
                    
                    
                    
                    
                    
                    

		/*===========36) Given a list of strings, write a program to find and print the strings with the minimum length using Java Stream API=============*/
                    
                    List<String> datas = Arrays.asList("apple", "banana", "kiw", "orange", "pear");
                    
                    Optional<String> asnswers =   datas.stream().max((str1,str2) -> str2.length()-str1.length());
                    
                     
                   
                    
                    

		/*===========37) Write a program to find the frequency of each element in a list of integers using Java Stream API=============*/
                    
                 /*  List<Integer> numbers = Arrays.asList(1, 2, 3, 3, 4, 4, 4, 5, 5);
                    
                 Map<Integer, Long> count =   numbers.stream().collect(Collectors.groupingBy(Function.identity(),Collectors.counting()));
                 
                 System.out.println(count);  */
                            

		/*===========38) Given a list of strings, write a program to find and print the strings with the maximum number of vowels using Java Stream API=============*/
                    
                 /*   List<String> data = Arrays.asList("apple", "banana", "kiwi", "orange", "pear");
                    
                    Map<String, Long> freqMap =  data.stream().collect(Collectors.toMap(s -> s, s -> s.chars().filter(c -> "AEIOUaeiou".indexOf(c)!=-1).count()));
              
                  long maxs =     freqMap.values().stream().mapToLong(Long::longValue).max().orElse(0);
                 
                  List<String> maxVowelStrings =  freqMap.entrySet().stream().filter(s -> s.getValue()==maxs).map(Map.Entry::getKey).collect(Collectors.toList());
                 
                  System.out.println(maxVowelStrings);  */
                    
                    
                    
                    

		/*===========39) Write a program to check if a list of integers is sorted in ascending order using Java Stream API=============*/
              /*      List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
                   boolean answes =    numbers.stream().sorted().collect(Collectors.toList()).equals(numbers);    
                   
                   System.out.println(answes);*/
                  
                  

		/*===========40) Given a list of strings, write a program to find and print the strings with the minimum number of vowels using Java Stream API=============*/
                    
               /*     List<String> data = Arrays.asList("apple", "banana", "kiwi", "orange", "pear");
                    
                    Map<String, Long> frequencyMap =  data.stream().collect(Collectors.toMap(s -> s, s -> s.chars().filter(c -> "AEIOUaeiou".indexOf(c)!=-1).count()));
                    
                    long minVowelCount =    frequencyMap.values().stream().mapToLong(Long::longValue).min().orElse(0);
                    
                    List<String> maxVowelStrings =  frequencyMap.entrySet().stream().filter(s -> s.getValue()==minVowelCount).map(Map.Entry::getKey).collect(Collectors.toList());
                    
                    System.out.println(maxVowelStrings);   */
                    
                    
		
		/** 
		41. Write a program to find the median of a list of integers using Java Stream API. 
		*/
              /*      List<Integer> data = Arrays.asList(1, 2, 3, 4, 5,6);
                    
                  OptionalDouble median =    data.stream().mapToInt(Integer::intValue).sorted().skip((data.size()-1) /2).limit(data.size()%2==0 ? 2:1).average();
                  
                  System.out.println(median);  */
                      
                    
                    
		/** 
		42. Given a list of strings, write a program to find and print the strings containing a specific character at least twice using Java Stream API. 
		*/
                    
                  /*  List<String> data = Arrays.asList("apple", "banana", "kiwi", "orange", "pear");
                    
                    char targetChar = 'a';
                    
                    List<String> containingCharTwice =     data.stream().filter(str -> str.chars().filter(c -> c== targetChar).count()>=2).collect(Collectors.toList());
                    
                    System.out.println("Strings containing \"" + targetChar + "\" at least twice: " + containingCharTwice);  */
                    

		/** 
		43. Write a program to find the kth smallest element in a list of integers using Java Stream API. 
		*/
                    
                /*    List<Integer> data = Arrays.asList(3, 1, 4, 1, 5, 9, 2, 6, 5);
                    int k = 3;
                    
                  Optional<Integer>  resultss =    data.stream().sorted().skip(k-1).findFirst();
                  
                  System.out.println(resultss);   */
                  
                  
                    
                    

		/** 
		44. Given a list of strings, write a program to find and print the strings with the maximum number of consonants using Java Stream API. 
		*/
                    
                    List<String> data = Arrays.asList("apple", "banana", "kiwi", "orange", "pear");
                    
                    Map<String, Long> frequencyMap =     data.stream().collect(Collectors.toMap(s -> s, s -> s.chars().filter(c -> "BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz".indexOf(c)!=-1).count()));
                    
             long maxi =       frequencyMap.values().stream().mapToLong(Long::longValue).max().orElse(0);
             
             List<String> maxConsonantStrings =   frequencyMap.entrySet().stream().filter(entry -> entry.getValue()==maxi).map(Map.Entry::getKey).collect(Collectors.toList());
             
             System.out.println(maxConsonantStrings);
                     
                    
                    
                    

		/** 
		45. Write a program to check if a list of strings is palindrome using Java Stream API. 
		*/

		/** 
		46. Given a list of integers, write a program to find and print the elements with the highest frequency using Java Stream API. 
		*/

		/** 
		47. Write a program to remove all non-numeric characters from a list of strings using Java Stream API. 
		*/

		/** 
		48. Given a list of strings, write a program to find and print the strings containing only digits using Java Stream API. 
		*/

		/** 
		49. Write a program to find the kth largest element in a list of integers using Java Stream API. 
		*/
             
             int k =3;
                     
             Optional<Integer> kthLargest =list.stream()
            		    .distinct()
            		    .sorted(Comparator.reverseOrder())
            		    .skip(k - 1)
            		    .findFirst();

             
             
		/** 
		50. Given a list of integers, write a program to find and print the elements with the lowest frequency using Java Stream API. 
		*/






	}

}
