package com.ssss;

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.OptionalDouble;
import java.util.OptionalInt;
import java.util.OptionalLong;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class Finalsss {
	
	
	private static boolean isPrime(int number)
	{
		 if (number <= 1) 
		 {
	            return false;
	        }

		
		
		
		for(int i=2;i<=Math.sqrt(number);i++)
		{
			
			if(number%i==0)
			{
				return false;
			}
			
		}
		
		return true;
		
	}
	
	
	
	

	public static void main(String[] args) 
	{
		
		
		
		
		/*===========1) Write a program to find the sum of all elements in a list using Java Stream API=============*/
		
		/* List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
		 
	   int sum =	 numbers.stream().mapToInt(Integer::intValue).sum();
	    System.out.println(sum);  */
		 
		 
		
		

		/*===========2) Given a list of integers, write a program to find and print the maximum element using Java Stream API=============*/
		
	/*	   List<Integer> numbers = Arrays.asList(2, 4, 8, 6, 10);
		   
		 OptionalInt max =  numbers.stream().mapToInt(Integer::intValue).max();
		 
		 System.out.println(max);   */
		
		

		/*===========3) Write a program to filter out all the even numbers from a list using Java Stream API=============*/
		
		 /*   List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
		 List<Integer> res =   numbers.stream().filter(n -> n%2==0).collect(Collectors.toList());
		 
		 System.out.println(res);  */
		
		

		/*===========4) Given a list of strings, write a program to count the number of strings containing a specific character ‘a’ using Java Stream API=============*/
	/*	List<String> strings = Arrays.asList("apple", "banana", "orange", "grape");
        char searchChar = 'a';
        
      long count =  strings.stream().filter(str -> str.contains(String.valueOf(searchChar))).count();
      
      System.out.println(count);    */
		 
		
		
		
		/*===========5) Write a program to convert a list of strings to uppercase using Java Stream API=============*/
		
		
		/*   List<String> strings = Arrays.asList("apple", "banana", "orange", "grape");
		 List<String> res =  strings.stream().map(str -> str.toUpperCase()).collect(Collectors.toList());
		 
		 System.out.println(res);   */
		
		

		/*===========6) Given a list of integers, write a program to calculate the average of all the numbers using Java Stream API=============*/
		
		/*     List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5); 
		   OptionalDouble average =   numbers.stream().mapToDouble(Integer::doubleValue).average();		
		   
		   System.out.println(average);   */
		

		/*===========7) Write a program to sort a list of strings in alphabetical order using Java Stream API=============*/
		
	/*	List<String> strings = Arrays.asList("banana", "orange", "apple", "grape");
		
	    List<String> res =	strings.stream().sorted().collect(Collectors.toList());
	    
	    System.out.println(res);   */
		
		

		/*===========8) Given a list of strings, write a program to concatenate all the strings using Java Stream API=============*/
		
		
		/*   List<String> strings = Arrays.asList("apple", "banana", "orange", "grape");
		   
		String res =   strings.stream().collect(Collectors.joining());
		
		System.out.println(res);   */
		

		/*===========9) Write a program to find the longest string in a list of strings using Java Stream API=============*/
		
		/*    List<String> strings = Arrays.asList("apple", "banana", "orange", "grape");
		    
		  Optional<String> res =   strings.stream().max((str1,str2) -> str1.length()-str2.length());
		  
		  System.out.println(res);   */
		
		

		/*===========10) Given a list of integers, write a program to find and print the second largest number using Java Stream API=============*/
		
		  /*  List<Integer> numbers = Arrays.asList(4, 2, 8, 6, 10);
		    
		  Optional<Integer> res =    numbers.stream().sorted((num1,num2) -> num2-num1).skip(1).findFirst();
		  
		  System.out.println(res);   */
		
		

		/*===========11) Write a program to remove all the duplicate elements from a list using Java Stream API=============*/
		  
		  
		/*  List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 2, 5, 6, 3, 7, 8, 1);
		  
		List<Integer> res =  numbers.stream().distinct().collect(Collectors.toList());
		
		System.out.println(res);   */

		/*===========12) Given a list of strings, write a program to find and print the shortest string using Java Stream API=============*/
		
		
		/*   List<String> strings = Arrays.asList("apple", "banana", "kiwi", "orange", "pear");
		   
		Optional<String> res =   strings.stream().max((str1,str2) -> str2.length()-str1.length());
		
		System.out.println(res);   */
		
		

		/*===========13) Write a program to convert a list of integers to a list of their squares using Java Stream API=============*/
		
		/*    List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
		    
	       List<Integer> res =   numbers.stream().map(n -> n*n).collect(Collectors.toList());
	       
	       System.out.println(res);   */
		
		

		/*===========14) Given a list of strings, write a program to find and print the strings starting with a specific prefix ‘a’ using Java Stream API=============*/
		
		 /*    List<String> strings = Arrays.asList("apple", "banana", "kiwi", "orange", "apear");
             String prefix = "a";
             
           List<String> res =  strings.stream().filter(str -> str.startsWith(prefix)).collect(Collectors.toList());
           
           System.out.println(res);   */
              
              
		

		/*===========15) Write a program to find the product of all elements in a list of integers using Java Stream API=============*/
		
		/*   List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
		   
		   int sum =   numbers.stream().reduce(1, (num1,num2) -> num1*num2);
		   
		   System.out.println(sum);   */
		

		/*===========16) Given a list of integers, write a program to find and print the prime numbers using Java Stream API=============*/
		
		/*   List<Integer> numbers = Arrays.asList(2, 3, 4, 5, 6, 7, 8, 9, 10, 11);
		   
		 List<Integer> res =  numbers.stream().filter(Finalsss::isPrime).collect(Collectors.toList());
		 
		 System.out.println(res);  */
		   
		   
		 

		/*===========17) Write a program to check if a list of strings contains a specific string using Java Stream API=============*/
		
		/* List<String> strings = Arrays.asList("apple", "banana", "kiwi", "orange", "pear");
	        String target = "banana";
	        
	       boolean res =  strings.stream().anyMatch(str -> str.equals(target));
	       
	       System.out.println(res);   */
	       
	      
	     
		
		
		

		/*===========18) Given a list of strings, write a program to find and print the strings with length greater than a specified value 5 using Java Stream API=============*/
                    
	/*	 List<String> strings = Arrays.asList("apple", "banana", "kiwi", "orange", "pear");
		 
		 int res = 5;
		 
		List<String> ss =  strings.stream().filter(str -> str.length()>res).collect(Collectors.toList());
		
		System.out.println(ss);   */
		
		
		/*===========19) Write a program to filter out all the elements divisible by 3 and 5 from a list of integers using Java Stream API=============*/
		
		/*   List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);
		   
		   List<Integer> res =    numbers.stream().filter(n -> n%3 ==0 && n%5==0).collect(Collectors.toList());
		   
		   System.out.println(res);  */
		 

		/*===========20) Given a list of strings, write a program to find and print the strings with the maximum length using Java Stream API=============*/
		 
		/*     List<String> strings = Arrays.asList("apple", "banana", "kiwi", "orange", "pear");
		     
		   Optional<String> res =  strings.stream().max((str1,str2) -> str1.length()-str2.length());
		   
		   System.out.println(res);  */
		    
		    
		

		/*===========21) Write a program to reverse a list of strings using Java Stream API=============*/
		
		/* List<String> strings = Arrays.asList("apple", "banana", "kiwi", "orange", "pear");
		       List<String> res =         IntStream.range(0, strings.size()).mapToObj(i -> strings.get(strings.size()-1-i)).collect(Collectors.toList());
		       
		       System.out.println(res);  */
		
		

		/*===========22) Given a list of integers, write a program to find and print the distinct odd numbers using Java Stream API=============*/
		
		 /*  List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
		   
		List<Integer> res =   numbers.stream().filter(n -> n%2!=0).distinct().collect(Collectors.toList());
		
		System.out.println(res);   */
		

		/*===========23) Write a program to remove all null values from a list of strings using Java Stream API=============*/
		
		
	/*	 List<String> strings = Arrays.asList("apple", null, "banana", null, "kiwi", "orange", null, "pear");
		 
	List<String> res =	 strings.stream().filter(str -> str!=null).collect(Collectors.toList());
	
	System.out.println(res);   */
		                
		

		/*===========24) Given a list of integers, write a program to find and print the sum of all odd numbers using Java Stream API=============*/
	/*	List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
		
		int sum =  numbers.stream().filter(n -> n%2!=0).reduce(0, (a,b) -> a+b);
		
		 int sumOfOddNumbers = numbers.stream()
                                    .filter(n -> n % 2 != 0)
                                    .mapToInt(Integer::intValue)
                                    .sum();
		
		System.out.println(sum);   */
		           
		
		
		
		/*===========25) Write a program to find the intersection of two lists of strings using Java Stream API=============*/
		
		/*    List<String> list1 = Arrays.asList("apple", "banana", "kiwi", "orange", "pear");
		    List<String> list2 = Arrays.asList("banana", "orange", "grape", "watermelon");
		    
		 List<String> sum =   list1.stream().filter(list2::contains).collect(Collectors.toList());
		 
		 System.out.println(sum);  */
		

		/*===========26) Given a list of strings, write a program to find and print the strings containing only vowels using Java Stream API=============*/
                        
	  /* List<String> strings = Arrays.asList("apple", "banana", "kiwi", "orange", "pear", "oai");
		 
		List<String> res =   strings.stream().filter(str -> str.matches("[aeiouAEIOU]+")).collect(Collectors.toList());
		
		System.out.println(res);   */
		
		
		/*===========27) Write a program to convert a list of strings to a comma-separated string using Java Stream API=============*/
		
	/*	  List<String> strings = Arrays.asList("apple", "banana", "kiwi", "orange", "pear");
		  
		  String res =  strings.stream().collect(Collectors.joining(","));
		  System.out.println(res);   */
		  
		  
		

		/*===========28) Given a list of integers, write a program to find and print the index of the first occurrence of a specific number using Java Stream API=============*/
		
		/*   List<Integer> numbers = Arrays.asList(1, 3, 5, 7, 9, 2, 4, 6, 8, 10);
            int targetNumber = 7;
            
          Optional<Integer> res =   numbers.stream().filter(n -> numbers.get(n)==targetNumber).findFirst();
          
          System.out.println(res);    */
            
		

		/*===========29) Write a program to find the union of two lists of integers using Java Stream API=============*/
		
	/*	List<Integer> list1 = Arrays.asList(1, 2, 3, 4, 5);
        List<Integer> list2 = Arrays.asList(4, 5, 6, 7, 8);
        
        List<Integer> res =   Stream.concat(list1.stream(), list2.stream()).distinct().collect(Collectors.toList());
        
        System.out.println(res);   */
		
		
		

		/*===========30) Given a list of strings, write a program to find and print the strings containing duplicate characters using Java Stream API=============*/
		
	 /*	  List<String> strings = Arrays.asList("apple", "banana", "kiwi", "orange", "pear", "strawberry", "watermelon");
		  
		  
		 List<String> res =    strings.stream().filter(s -> s.length()!=s.chars().distinct().count()).collect(Collectors.toList());
		 
		 System.out.println(res);   */
		  
		

		/*===========31) Write a program to check if all elements in a list of strings are of the same length using Java Stream API=============*/
		 
	/*	List<String> strings = Arrays.asList("apple", "banana", "kiwi", "orange", "pear");
		
		  boolean res =     strings.stream().map(String::length).distinct().count()==1;
		  
		  System.out.println(res);  */
		
		
		
		

		/*===========32) Given a list of integers, write a program to find and print the difference between the maximum and minimum numbers using Java Stream API=============*/
		
		/*   List<Integer> numbers = Arrays.asList(10, 5, 7, 18, 3, 15);
		   
		OptionalInt max =   numbers.stream().mapToInt(Integer::intValue).max();
		   
		OptionalInt min =   numbers.stream().mapToInt(Integer::intValue).min();
		
		int diff = max.getAsInt()- min.getAsInt();
		
		System.out.println(diff);  */
		

		/*===========33) Write a program to remove all whitespace from a list of strings using Java Stream API=============*/
		
		/* List<String> strings = Arrays.asList("apple", "ba nana", "kiwi", "oran ge", "pear");
		 
	   List<String> res =	 strings.stream().map(str -> str.replaceAll("\\s", "")).collect(Collectors.toList());
	
	   System.out.println(res);  */
		 

		/*===========34) Given a list of strings, write a program to find and print the strings containing a specific substring using Java Stream API=============*/
                               
		/*  List<String> strings = Arrays.asList("apple", "banana", "kiwi", "orange", "pear");
		  
		  String substring = "an";
		  
	List<String> res =	  strings.stream().filter(str -> str.contains(substring)).collect(Collectors.toList());
	
	System.out.println(res);   */
		
		
		
		/*===========35) Write a program to find the mode of a list of integers using Java Stream API=============*/
		
		/*    List<Integer> numbers = Arrays.asList(1, 2, 3, 3, 4, 4, 4, 5, 5);
		    
		 Map<Object, Long> freq =   numbers.stream().collect(Collectors.groupingBy(n -> n, Collectors.counting()));
		 
		   long max = freq.values().stream().mapToLong(Long::longValue).max().orElse(0);
		   
		 List<Object> res =  freq.entrySet().stream().filter(num -> num.getValue()==max).map(Map.Entry::getKey).collect(Collectors.toList());
		 
		 System.out.println(res);   */
		
		

		/*===========36) Given a list of strings, write a program to find and print the strings with the minimum length using Java Stream API=============*/
                 
		
		/* List<String> strings = Arrays.asList("apple", "banana", "kiwi", "o", "pear");
		 
	Optional<String>	 res = strings.stream().max((str1,str2) -> str2.length()-str1.length());
	
	
	System.out.println(res);   */
		
		
		
		/*===========37) Write a program to find the frequency of each element in a list of integers using Java Stream API=============*/
		
		
		/* List<Integer> numbers = Arrays.asList(1, 2, 3, 3, 4, 4, 4, 5, 5);
		 
	Map<Object, Long> freq =	 numbers.stream().collect(Collectors.groupingBy(str -> str, Collectors.counting()));
	
	System.out.println(freq);   */
		 
		 
		 

		/*===========38) Given a list of strings, write a program to find and print the strings with the maximum number of vowels using Java Stream API=============*/
		
		
	/*	List<String> strings = Arrays.asList("apple", "banana", "kiwi", "orange", "pear");
		
		 Map<String, Long> frequencyMap =   strings.stream().collect(Collectors.toMap(str -> str, (str) -> str.chars().filter(c -> "AEIOUaeiou".indexOf(c)!=-1).count()));
		 
		long max = frequencyMap.values().stream().mapToLong(Long::longValue).max().orElse(0);
		
	List<String> res =	frequencyMap.entrySet().stream().filter(entry -> entry.getValue()==max).map(Map.Entry::getKey).collect(Collectors.toList());
	
	System.out.println(res);  */
		       
		
		

		/*===========39) Write a program to check if a list of integers is sorted in ascending order using Java Stream API=============*/
		
		     /*          List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
		               
		          boolean res =     numbers.stream().sorted().collect(Collectors.toList()).equals(numbers);
		          
		          System.out.println(res);  */
		               
		               
		
		
		
		

		/*===========40) Given a list of strings, write a program to find and print the strings with the minimum number of vowels using Java Stream API=============*/
		 
		/*      List<String> strings = Arrays.asList("apple", "banana", "kiwi", "orange", "pear");
		      
		    Map<String, Long> fre =       strings.stream().collect(Collectors.toMap(s -> s, s -> s.chars().filter(c -> "aeiouAEIOU".indexOf(c)!=-1).count()));
		    
		    
		long min =    fre.values().stream().mapToLong(Long::longValue).min().orElse(0);
		
	List<String> res =	fre.entrySet().stream().filter(entry -> entry.getValue()==min).map(Map.Entry::getKey).collect(Collectors.toList());
	
	System.out.println(res);  */
		    
		    
		
		
		

		/*===========41) Write a program to find the median of a list of integers using Java Stream API=============*/
		
		 /*   List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);
		    
	/*	OptionalDouble average =    numbers.stream()
		    .mapToInt(Integer::intValue)
		    .sorted()
		    .distinct()
		    .skip((numbers.size())/2)
		    .limit(numbers.size()%2==0 ? 2:1)
		    .average();
		    
		System.out.println(average);   */

		/*===========42) Given a list of strings, write a program to find and print the strings containing a specific character at least twice using Java Stream API=============*/
		    
		     /*    List<String> strings = Arrays.asList("apple", "banana", "kiwi", "orange", "pear");
	              char targetChar = 'a';
	              
	               strings.stream().filter(str -> str.chars().filter(c -> c==targetChar).count()>=2)
	               .collect(Collectors.toList());  */
		    
		    

		/*===========43) Write a program to find the kth smallest element in a list of integers using Java Stream API=============*/
		    
		   /*    List<Integer> numbers = Arrays.asList(3, 1, 4, 1, 5, 9, 2, 6, 5);
	            int k = 3;
	            
	          OptionalInt small =  numbers.stream().mapToInt(Integer::intValue).sorted()
	            .skip(k-1)
	            .findFirst();
	          
	          System.out.println(small);  */
		    
		    
		    

		/*===========44) Given a list of strings, write a program to find and print the strings with the maximum number of consonants using Java Stream API=============*/
                       
	/*	    List<String> strings = Arrays.asList("apple", "banana", "kiwi", "orange", "pear");
		    
	Map<String,Long> freq  =	    strings.stream().collect(Collectors.toMap(s -> s, s -> s.chars().filter(c ->"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz".indexOf(c)!=-1).count()));
		
	long min =	freq.values().stream().mapToLong(Long::longValue).max().orElse(0);
	
	 List<String> res =     freq.entrySet().stream().filter(entry -> entry.getValue()==min).map(Map.Entry::getKey).collect(Collectors.toList());
	 
	 System.out.println(res);  */
		
		
		
		
		/*===========45) Write a program to check if a list of strings is palindrome using Java Stream API=============*/
		
	/*	 List<String> strings = Arrays.asList("apple", "banana", "kiwi", "banana", "apple");
		 
		boolean palindrome = strings.stream().skip(strings.size()/2).allMatch(s -> s.equals(strings.get(strings.size()-1-strings.indexOf(s))));
		
		System.out.println(palindrome);   */
		
		

		/*===========46) Given a list of integers, write a program to find and print the elements with the highest frequency using Java Stream API=============*/
		
		
	/*	List<Integer> numbers = Arrays.asList(1, 2, 3, 3, 4, 4, 4, 5, 5);
		
		 Map<Object, Long> fre =    numbers.stream().collect(Collectors.groupingBy(s -> s, Collectors.counting()));
		 
		long max = fre.values().stream().mapToLong(Long::longValue).max().orElse(0);
		
		
		List<Entry<Object, Long>> res =  fre.entrySet().stream().filter(entry -> entry.getValue()==max).collect(Collectors.toList());
		
		System.out.println(res);   */
		 
		 
		
		
		
		                  
		
		
		

		/*===========47) Write a program to remove all non-numeric characters from a list of strings using Java Stream API=============*/
		
		/*   List<String> strings = Arrays.asList("a1b2c3", "1a2b3c", "123abc");
		   
		List<String> res =   strings.stream().map(str -> str.replaceAll("[^0-9]", "")).collect(Collectors.toList());
		
		System.out.println(res);  */
		
		
		

		/*===========48) Given a list of strings, write a program to find and print the strings containing only digits using Java Stream API=============*/
		
               List<String> strings = Arrays.asList("123", "abc", "456", "789", "def");
               
             List<String> res =  strings.stream().map(str -> str.replaceAll("[^a-z]", "")).collect(Collectors.toList());
             
             System.out.println(res);
		
		

		/*===========49) Write a program to find the kth largest element in a list of integers using Java Stream API=============*/

		/*===========50) Given a list of integers, write a program to find and print the elements with the lowest frequency using Java Stream API=============*/
		
		
		

	}

}
